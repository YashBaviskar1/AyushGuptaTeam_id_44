import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the dataset
df = pd.read_csv('merged_file.csv')
X = df[['Air temperature', 'Pressure', 'Wind speed']]
y = df['Power generated by system']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Build the neural network model
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1)  # Output layer
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, verbose=0)

# Predicting the Test set results
y_pred = model.predict(X_test_scaled).flatten()

# Evaluating the model
mse = np.mean((y_test - y_pred) ** 2)
print('Mean Squared Error (Neural Network):', mse)

# Load validation data
new_data = pd.read_excel("wind_power_gen_3months_validation_data.xlsx")
X_new = new_data[['Air temperature', 'Pressure', 'Wind speed']]

# Standardize validation data
X_new_scaled = scaler.transform(X_new)

# Predict power using the trained neural network
predicted_power_total = model.predict(X_new_scaled).flatten()

# Calculate the total power generated
total_power = predicted_power_total.sum()

# Calculate the power for each variable based on the specified percentages
c1_power = total_power * 0.20
c2_power = total_power * 0.45
c3_power = total_power * 0.35

# Save the predicted powers for each variable
new_data['Predicted Power c1'] = c1_power
new_data['Predicted Power c2'] = c2_power
new_data['Predicted Power c3'] = c3_power

# Save the updated data to a CSV file
new_data.to_csv('C1_c2_c3_with_predictions_variables.csv', index=False)
